# bash_completion - bash completion functions for apigee configuration tools
#
# To use, add the following to your .bashrc file:
#
#     APIGEE_APIS_DIR=${HOME}/apigee-configuration/apis
#     TOOLSDIR=${HOME}/apigee-tools
#     if [ -e "$TOOLSDIR/lib/bash_completion" ]; then
#         source "$TOOLSDIR/lib/bash_completion"
#     fi
#

### helper methods ###

# returns the index of the specified positional parameter
_positional_parameter() {
	debug "_positional_parameter() $@"
	local index=1
	while [[ "${COMP_WORDS[index]}" == -* ]]; do
		index=$(($index+1))
	done
	echo $(($index + $1 - 1))
}

# completes on options
_apigee_opts()
{
debug "_apigee_opts() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		COMPREPLY=( $( compgen -W '-d -h -v' -- $cur ) )
	fi
}

# completes on host aliases
_apigee_hosts()
{
debug "_apigee_hosts() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local hosts=$(for e in $TOOLSDIR/config/hosts/*; do echo $(basename "$e"); done)
    COMPREPLY=( $(compgen -W "$hosts" -- ${cur}) )
}

# completes on environments
_apigee_environments()
{
debug "_apigee_environments() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local environments=$(for e in $TOOLSDIR/config/environments/*; do echo $(basename "$e"); done)
    COMPREPLY=( $(compgen -W "$environments" -- ${cur}) )
}

# completes on api names
_apigee_apis()
{
debug "_apigee_apis() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local apis=$(for e in $APIGEE_APIS_DIR/*; do echo $(basename "$e"); done)
    COMPREPLY=( $(compgen -W "$apis" -- ${cur}) )
}

# completes on virtual hosts
_apigee_virtualhosts()
{
debug "_apigee_virtualhosts() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
	COMPREPLY=( $(compgen -W "default internal media-services omas auth admin private" -- ${cur}) )
}

# completes on standard api product names
_apigee_apiproduct()
{
debug "_apigee_apiproduct() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
	COMPREPLY=( $(compgen -W "nnas_external_apis" -- ${cur}) )
}

# completes on cache names
_apigee_caches()
{
debug "_apigee_caches() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
	COMPREPLY=( $(compgen -W "accessTokens clientIds timezones agreements regions" -- ${cur}) )
}

### completions ###

# completes $1 on environments
_apigee_environment()
{
debug "_apigee_environment() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
	elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_environments
	fi
}
complete -F _apigee_environment listApiVersions listStaleApis getVirtualHosts deleteVirtualHost addEnvironmentServer getEnvironmentServers deleteEnvironmentServer getKeystores getKeystore push getHost createCaches getCaches
debug "complete -F _apigee_environment listApiVersions listStaleApis getVirtualHosts deleteVirtualHost addEnvironmentServer getEnvironmentServers deleteEnvironmentServer getKeystores getKeystore push getHost createCaches getCaches"

# completes $1 on environments, $2 on known virtual host names
_apigee_environment_virtualhost()
{
debug "_apigee_environment_virtualhost() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
    elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_environments
	elif [ "$COMP_CWORD" = "$(_positional_parameter 2)" ]; then
        _apigee_virtualhosts
	fi
}
complete -F _apigee_environment_virtualhost getVirtualHost deleteVirtualHost createVirtualHost createSslVirtualHost
debug "complete -F _apigee_environment_virtualhost getVirtualHost deleteVirtualHost createVirtualHost createSslVirtualHost"

# completes $1 on environments, $2 on api names
_apigee_environment_api()
{
debug "_apigee_environment_api() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
    elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_environments
	elif [ "$COMP_CWORD" = "$(_positional_parameter 2)" ]; then
        _apigee_apis
	fi
}
complete -F _apigee_environment_api deploy deployLatest getDeployedApiVersion undeploy importDeploy
debug "complete -F _apigee_environment_api deploy deployLatest getDeployedApiVersion undeploy importDeploy"

# completes $1 on host aliases
_apigee_host()
{
debug "_apigee_host() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
	elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_hosts
	fi
}
complete -F _apigee_host -o dirnames importAll
debug "complete -F _apigee_host -o dirnames importAll"

complete -F _apigee_host -o default importBundle
debug "complete -F _apigee_host -o default importBundle"

complete -F _apigee_host addCredential updateCredential getCredential deleteCredential createApp createApps deleteApp getApis getAppNames getEnvironments createEnvironment createDeveloper getDevelopers getApigeeXml getApigeeJson getApp getApps getServers getOrganization setCredentialApiProduct getHostUrl
debug "complete -F _apigee_host addCredential updateCredential getCredential deleteCredential createApp createApps deleteApp getApis getAppNames getEnvironments createEnvironment createDeveloper getDevelopers getApigeeXml getApigeeJson getApp getApps getServers getOrganization setCredentialApiProduct getHostUrl"

# completes $1 on host aliases, $2 on api names
_apigee_host_api()
{
debug "_apigee_host_api() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
    elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_hosts
	elif [ "$COMP_CWORD" = "$(_positional_parameter 2)" ]; then
        _apigee_apis
	fi
}
complete -F _apigee_host_api -o default import
debug "complete -F _apigee_host_api -o default import"
complete -F _apigee_host_api getApiVersions getLatestApiVersion deleteApi
debug "complete -F _apigee_host_api getApiVersions getLatestApiVersion deleteApi"

# completes $1 on host aliases, $2 on environments
_apigee_host_environment()
{
debug "_apigee_host_environment() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
    elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_hosts
	elif [ "$COMP_CWORD" = "$(_positional_parameter 2)" ]; then
        _apigee_environments
	fi
}
complete -F _apigee_host_environment deleteEnvironment
debug "complete -F _apigee_host_environment deleteEnvironment"

# completes $1 on host aliases, $2 on standard API product names
_apigee_host_apiproduct()
{
debug "_apigee_host_apiproduct() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
    elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_hosts
	elif [ "$COMP_CWORD" = "$(_positional_parameter 2)" ]; then
		_apigee_apiproduct
	fi
}
complete -F _apigee_create_api_product getApiProduct deleteApiProduct
debug "complete -F _apigee_create_api_product getApiProduct deleteApiProduct"

# completes $1 on host aliases, $2 and $3 on the standard API product values
_apigee_create_api_product()
{
debug "_apigee_create_api_product() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
    elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_hosts
	elif [ "$COMP_CWORD" = "$(_positional_parameter 2)" ]; then
		_apigee_apiproduct
	elif [ "$COMP_CWORD" = "$(_positional_parameter 3)" ]; then
		COMPREPLY=( "'NNAS External APIs'" )
	fi
}
complete -F _apigee_create_api_product createApiProduct
debug "complete -F _apigee_create_api_product createApiProduct"

# completes $1 on environments, $2 on known cache names
_apigee_environment_cache()
{
debug "_apigee_environment_cache() $@"
    local cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == -* ]]; then
		_apigee_opts
    elif [ "$COMP_CWORD" = "$(_positional_parameter 1)" ]; then
        _apigee_environments
	elif [ "$COMP_CWORD" = "$(_positional_parameter 2)" ]; then
        _apigee_caches
	fi
}
complete -F _apigee_environment_cache createCache deleteCache getCache
debug "complete -F _apigee_environment_cache createCache deleteCache getCache"

