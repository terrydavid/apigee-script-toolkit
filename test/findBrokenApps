#!/bin/bash
#
# findBrokenProducts
#	find all the Api Products & Proxies, Developers and Dev Apps that are not linked properly in the db
#
#	Do the API proxy, API Product, Developer, Developer App. In that order to Create. Reverse to delete
#
# usage:
#   findBrokenProducts environment
#

#set -e

USAGE="environment"
TOOLSDIR="${APITOOLS_HOME}"

. "$TOOLSDIR/config/global"
. "$TOOLSDIR/lib/functions"

appLoop () {
	# fix the field seperator so the "for" loops will work
	oldFS="$IFS"
	IFS=$(echo -en "\n\'\"")
	#set -v
	for an in $AppNames ; do
		at=`echo "$an" | trims`
		debug "an=$an :: at=$at :: ue=$(uri_escape "$at")"
		output=`getApp ${OPTS[@]} "$HOST_ALIAS" "$at"`
		ERRLVL="$?"
		debug "ERRLVL=${ERRLVL}\n"
		debug "Output=\n$output"
		if [ "$FRMT" = "json" ] ; then
			#prodOut=`echo "$output" | jsonValueOf "apiproduct"`
			prodOut=`echo "$output" | jsonValueOf "credentials.*,0,.*apiProducts.*,0,.*apiproduct"`
		else
			prodOut=`echo "$output" | xmlValueOf "Name"`
			#'\([nN]ame\)\|\([iI]tem\)\|\([mM]essage\)'`
		fi
		debug "prodOut=\n$prodOut"

		# If the App has NO ApiProduct we need to flag that
		if [ "$ERRLVL" != "0" ] ; then
			warn "Error [$ERRLVL] occured"
		fi

		# need to validate if we have a real ApiProduct or not ( not there yet )
		if [ "$prodOut" = "" ] ; then
			error "AppName [$at] has NO Products!"
		else
			echo "AppName [$at] has Products: "
			echo "$prodOut" | trims
		fi
	done
	IFS="$oldFS"
}

parseCommandline "$@"
checkArgs 1

loadConfig "${ARGS[0]}"

FRMT=json

# find all the Products for an App ( could have multiple because of multiple keys )
if true ; then 
	AppNames=`getAppNames ${OPTS[@]} ${ARGS[0]}`
	debug "AppNames= \n$AppNames"
	appLoop
fi
