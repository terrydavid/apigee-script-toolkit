#!/bin/bash
# ulApiEnv
# 
# 2nd half of moving an API Env
#	Uploads $ENV specific artifacts into a ORG:ENV
#
#	TODO:
#
#
#

TOOLSDIR="${APITOOLS_HOME}"
. "$TOOLSDIR/lib/functions"
parseCommandline "$@"
checkArgs 2 4

OUTFILE="APIRevList.out"
SFOUTFILE="SFRevList.out"
KVMOUTFILE="KVMList.out"

# addnl functions:
puttargets () {
	DIR=$1
	[[ ! -d ${DIR}/targets ]] && echo "${DIR}/targets not found" && exit "-2";

	# Scan for target serverss
	TSLIST=`ls ./targets/`
	echo "TSLIST= ${TSLIST}"
	for ts in $TSLIST; do
	    echo "thisTS: ./targets/${ts} "

	    DEBUG=2; echo "-v" >~/.curlrc
	    
	    TSLIST=`crtgtsvr ./targets/${ts}`
	    
	    DEBUG=0; echo "" >~/.curlrc
	    
	    sleep 2  # Debug for TS timeouts
	done
}

getvhosts () {
	DIR=$1
	[[ ! -d ${DIR}/vhosts ]] && mkdir "${DIR}/vhosts";

	# get the list of virtual hosts
	VHLIST=`getVirtualHosts`
	for vh in $VHLIST; do
	    echo "thisVH: ${vh}"
	    VHOST=`getVirtualHost ${vh} | sed -e 's/[",\[]//g' -e 's/\]//g' > ${DIR}/vhosts/${vh}.json`
	done
}

# KVMs come in 2 flavors; 
#	configuration that is for the specific environment but does not change during 
#	functional operation (we create as needed the directory and the JSON file of the results),
#	and operational KVMS that hold variable information across multiple requests
#	(we only create as needed the directory. Its name will create KVM at upload time)
#
#				TODO: 	Fix Config KVMs!!!
getkvms() {
	DIR=$1
	kvmDIR="$DIR/kvms"
	[[ ! -d ${kvmDIR} ]] && mkdir ${kvmDIR}

	# Scan for KVMs
	find "${DIR}" -name '*.xml' -exec grep mapIdentifier= '{}' ';' |
			sed -a -e 's/^.*mapIdentifier=\"//g' -e 's/\".*$/ /g' | sort -u > $KVMOUTFILE
	
	KLIST=`cat $KVMOUTFILE | sort -u`
	debug "KLIST= $KLIST"
	for k in $KLIST; do 

	    echo "thisKVM: ${k}"
	    KVM="$(getKeyValueMap ${k})" 

	    KDIR="${kvmDIR}/${k}";
	    [[ ! -d ${KDIR} ]] && mkdir "${KDIR}";

	    CFG=""; [[ `echo "$k" | grep "PTT-"` ]] && CFG=true;
	    [[ ${CFG} ]] && [[ -d ${KDIR} ]] && echo "$KVM" > $KDIR/$k.json;
	done
}

putsharedflows() {
	DIR=$1
	shDIR="$DIR/../shFlows"
	[[ ! -d ${shDIR} ]] && exit 1 "No SharedFlows found"

	# Scan for SharedFlows used by this proxy
	cd ${shDIR}
	ls  > $SFOUTFILE
	# find "${DIR}/apis" -name "*.xml" -exec grep 'Bundle>sf_' {} \; | 
			# sed -a -e 's/^.*Bundle>sf_/sf_/g' -e 's/<.*$/ /g' | sort -u > ${SFOUTFILE}

	SFLIST=`cat $SFOUTFILE`
	# SFLIST='sf_ptt-verifyToken sf_gcp-srvcAuth'
	debug "SFLIST=$SFLIST"

	for sf in $SFLIST ; do
		echo -n "thisSF: ${sf} " # for each SF, upload the zip file 

		# date="${file#*-}" # Use Parameter Expansion to strip off the part before '-'
		rev="${sf#*_}"
		b=$(echo ${sf} | cut -d'_' -f 1)
		debug "b= ${b}; rev= ${rev}"
		ZIP="${DIR}/${sf}/${b}-${rev}.zip"
		debug "ZIP= ${ZIP}"

		# importBundle ${ZIP}
		importSHFlow ${b} ${ZIP}
	done
}

putapiproxies () {
	DIR="$1"
	[[ ! -d ${DIR} ]] && exit 1 "No APISDIR found"

	cd $DIR
	ALIST=`ls .` # retrieves list of apis in this ENV
	# ALIST="ptt-auth" # Unit test only
	debug "ALIST=$ALIST"

	for a in $ALIST ; do
		# debug 
		echo -en "thisAPI: ${a} " # for each API Proxy, upload the file

		# date="${file#*-}" # Use Parameter Expansion to strip off the part before '-'
		rev="${a#*_}"
		b=$(echo ${a} | cut -d'_' -f 1)
		debug "b= ${b}; rev= ${rev}"
		ZIP="${DIR}/${a}/${b}-${rev}.zip"
		debug "ZIP= ${ZIP}"

		# importBundle ${ZIP}
		importApi ${b} ${ZIP}
	done
	cd -
}

# MAIN starts here; ENV is controlled by .apigee file
# MAIN starts here; ENV is controlled by .apigee file
# MAIN starts here; ENV is controlled by .apigee file
# MAIN starts here; ENV is controlled by .apigee file

[[ $DEBUG -ge 3 ]] && set -x
OPWD=`pwd`

echo -en "\n\n\t***** Uploading the directory ${OPWD} to environment ${ORG}:${ENV} *****\n\n\n"

if [[ ! -d ${APISDIR} ]] ; then
	echo -en "APISDIR= ${APISDIR} is not found [404]"
	exit
# else
# 	cd ${APISDIR}; cd ..
# 	APISDIR=`pwd`
# 	BZF="${APISDIR}/${ORG}-${ENV}.bkp.zip"
# 	echo -en "Backing up: ${APISDIR}/* to ${BZF} \n\n"
# 	# [TODO] Add a date-time string to filename
# 	zip -r ${APISDIR}/${ORG}-${ENV}.bkp.zip ${APISDIR}
# 	echo "done $?"
# 	[[ $? != 0 ]] && exit
# 	mv ${APISDIR}/${ORG}-${ENV}.bkp.zip ..
# 	rm -fr *
fi


# echo -en "\n\tPutting Proxies\n"
# putapiproxies ${APISDIR}

echo -en "\n\tPutting SharedFlows\n"
# # Scan for SharedFlows used by this proxy
putsharedflows ${APISDIR}
# # TODO? loop to check SFs for embedded SFs

# # Scan for KVMs and download info
# echo -en "\n\tGetting KVMS\n"
# getkvms ${APISDIR}

# Scan for TargetServers & download
# echo -en "\n\tPutting TargetServers\n"
# puttargets ${APISDIR}
# puttargets .

# # Scan for VirtualHosts & download
# echo -en "\n\tGetting VirtualHosts\n"
# getvhosts ${APISDIR}

# Scan for 'caches' & download
# TODO

echo -en "\n\n\t************ End of processing `basename $0` **********\n\n\n"

cd -
set -
